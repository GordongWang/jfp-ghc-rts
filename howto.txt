HOW TO BUILD A GHC RUNTIME SYSTEM

You're building a runtime for Haskell. Where are you going to start?!

Some big questions
------------------

- How much technical detail should specific sections go into?
- Should sections be divided in a way that some "details" are not
  presented until later (versus considering all of the problems at once)
- Should exceptions be introduced before or after the execution model of
  Haskell is discussed?

- Giving the high level motivation, that's an important thing to get into,
  enough for them to understand why we did it this way.  But in order to replicate it they will probably
  need to read the full technical details.  But if it's important to understand.

- Making a fast curry - good paper on evaluation.  So certainly we don't
  want to go into the full details on the eval-apply.  But you need enough details.
  Take a stack of a thread and turn it into the object of the heap, in such a way that
  if someone demands the value later, you can reuse the computation.  So you need to explain enough about thunks,
  layout of the stack, update frames.
- Short intro to evaluation before threading; or maybe even before
  GC--but don't talk about lazy evaluation too long!  There are some things you just can't
  do without lazy evaluation, make some sort of argument why that would be useful.
- Important to talk about what the implementation of lazy evaluation;
  all of the stuff, e.g. async is we can only do it because we have lazy evaluation and we can suspend it on the heap.

